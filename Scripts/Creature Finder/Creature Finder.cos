***
* Creature Finder
* v1.2
*
* Allows you to type simple commands to the hand to find specific creatures by name:
*   goto <name>		Move the camera to the creature named <name>.
*   hold <name>		Move the camera to the creature named <name> and hold its hand.
*   summon <name>		Pick up the creature named <name>, teleporting it to you.
*   get <name>		Move the camera to the creature named <name> and pick it up.
*
* If <name> ends with an asterisk (*), it will return the first creature with a name beginning
* with <name>. e.g. "summon ron*" could match to a creature named Ronald.
*
* Excessively commented as a learning reminder. This is my first time working with CAOS.
*
* Author: lisdude@lisdude.com
* Last Modified: 2021-05-09
***

new: simp 1 2 41600 "blnk" 0 0 0
* Set the input mask. We're only listening for Raw Key Down (1)
imsk 1
* Hide from the creatures. Nothing to see here...
attr 16

scrp 1 2 41600 73
* Wait until the user hits 'enter' (keycode 13)
	doif _p1_ eq 13

*** Variables ***
* va01: Sort of a 'break' for enums. My theory is that we do our expensive work and then set va01 to 1.
*       Then, in every other iteration of the loop, we check if va01 is true and, if so, do nothing at all.
*       Of course this is all theoretical and unverified. But it sounds good, right?
		setv va01 0
* va02: Creature name we're interested in.
		sets va02 ""
* va03: What are we doing with the creature?
*       1. Hold its hand.
*       2. Pick it up.
*       3. Move the camera to it.
*	  4. Summon it to us.
		setv va03 0
* va04: Temp variable
* va05: Length of va02
* va06: Enumerated creature's lowercased name.
* va07: Flag indicating whether or not a match succeeded.
		setv va07 0
* va08: A flag indicating whether to allow partial matches or not.
		setv va04 0
******************

* Give up our timeslice so that the speech bubble will run first and actually get created.
		wait 0
* Enumerate through all speech bubbles until we find something worthwhile.
* This is moderately annoying because it will include all creature speech bubbles, not just the hand. Don't know how to do better.
		inst
		enum 1 2 9
			doif va01 eq 0 and targ ne null
				part 1
* We need to reference the length of ptxt (speech bubble text) a couple of times, so store it.
				setv va04 strl ptxt
* Check if we're being given a command and, if so, set appropriate flags. This is a lot of length checking and string splicing.
* This looks a bit... verbose... because AND apparently evaluates both sides regardless of whether the left is true or not.
				doif va04 ge 5
					doif lowa subs ptxt 1 5 eq "hold "
* Set our 'interested name' variable (va02) to bubble[5..$] after subtracting the length of our command from the total length.
						subv va04 5
						sets va02 lowa subs ptxt 6 va04
* Set the 'hold hand' flag.
						setv va03 1
* Break variable.
						setv va01 1
					elif lowa subs ptxt 1 5 eq "goto "
						subv va04 5
						sets va02 lowa subs ptxt 6 va04
						setv va03 3
						setv va01 1
					endi
				endi
				doif va04 ge 4
					doif lowa subs ptxt 1 4 eq "get "
						subv va04 4
						sets va02 lowa subs ptxt 5 va04
						setv va03 2
						setv va01 1
					endi
				endi
				doif va04 ge 7
					doif lowa subs ptxt 1 7 eq "summon "
						subv va04 7
						sets va02 lowa subs ptxt 8 va04
						setv va03 4
						setv va01 1
					endi
				endi
			endi
		next

* Reset our break variable!
		setv va01 0

* Check if we have a creature name to work with.
		doif va02 ne ""
* Check if it's a partial match.
			setv va05 strl va02
			doif char va02 va05 eq '*'
* Set partial match flag to true.
				setv va08 1
* Change the name to get rid of the asterisk
				subv va05 1
				sets va02 subs va02 1 va05
			endi
* Since I don't trust 'and' and 'or' in CAOS, we'll store SUCCESS WOO in va07 and do everything the long way.
			setv va07 0
* See if any creatures match that name.
			enum 4 0 0
* Check our 'break' flag. If we're done, no sense in doing more string comparisons.
				doif va01 eq 0
* Store the lowercased Creature's name.
					sets va06 lowa hist name gtos 0
* Check if the name (va06) matches the name given in the speech bubble (va02) exactly
					doif va06 eq va02
						setv va07 1
* If we wanted to try partial matching...
					elif va08 eq 1
* Make sure the length is correct before trying to chop up the creature name.
						doif strl va06 ge va05
* Check if our name (va06) is a substring of the creature's name
							doif subs va06 1 va05 eq va02
								setv va07 1
							endi
						endi
					endi
					doif va07 eq 1
						setv va01 1
						doif va03 eq 3
* Goto: Just change the active creature. Done!
							norn targ
						elif va03 eq 1
* Hold its hand.
							mesg writ targ 13
						elif va03 eq 2 or va03 eq 4
* Pick it up either by summoning or getting.
							doif va03 eq 2
* If we're getting, center the camera on the target.
								cmrt 0
							endi
* Kind of a kludge, but it works. The default behavior for right-clicking a creature is to hold its hand.
* Here we temporarily override that setting so that right-clicking picks it up.
							setv va04 game "engine_creature_pickup_status"
							setv game "engine_creature_pickup_status" 0
							rgam
* Sent a message to ID 1000 (DS Pointer scripts.cos) saying pntr (hand) wants to pick this creature up.
							mesg wrt+ pntr 1000 targ null 0
							wait 0
							inst
							setv game "engine_creature_pickup_status" va04
							rgam
						endi
					endi
				endi
			next
		endi
	endi
endm

* Removal script. 
rscr
enum 1 2 41600
	kill targ
next
* Remove from scriptorium.
scrx 1 2 41600 73
